<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotSuite</name>
    </assembly>
    <members>
        <member name="T:BotSuite.Window">
            <summary>
            Class with function for windows handling
            </summary>
        </member>
        <member name="M:BotSuite.Window.SetFrontWindow(System.String)">
            <summary>
            set a window into the front
            </summary>
            <param name="WindowName"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Window.ShowWindow(System.IntPtr)">
            <summary>
            show a window
            </summary>
            <param name="WindowHandle"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Window.GetAllMainWindows">
            <summary>
            collect MainWindows
            </summary>
            <example>
            <code>
            <![CDATA[
            List<IntPtr> hWnds = new List<IntPtr>();
            hWnds = Window.GetAllMainWindows();
            ]]>
            </code>
            </example>
            <returns>Returns an array of window handles.</returns>
        </member>
        <member name="M:BotSuite.Window.FindWindowByProcessName(System.String)">
            <summary>
            try to find a window by using the name of the corresponding process
            </summary>
            <example>
            <code>
            <![CDATA[
            IntPtr hwnd = (IntPtr)0;
            hWnd = Window.FindWindowByProcessName("notepad");
            ]]>
            </code>
            </example>
            <param name="ProcessName">handle of window</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Window.FindWindowByWindowTitle(System.String)">
            <summary>
            get a handle of a window by name
            </summary>
            <example>
            <code>
            IntPtr hwnd = Window.GetHandleByWindowTitle("notepad");
            </code>
            </example>
            <param name="WindowTitle">name of window</param>
            <returns>handle of window</returns>
        </member>
        <member name="M:BotSuite.Window.FindWindowByProcessId(System.Int32)">
            <summary>
            get a handle of a window by the id of the process
            </summary>
            <param name="id">The process Id of the process in question.</param>
            <returns>handle of window</returns>
        </member>
        <member name="T:BotSuite.Keyboard">
            <summary>
            A class that manages a global low level keyboard hook
            </summary>
            <remarks>
            Singleton-Pattern
            </remarks>
        </member>
        <member name="F:BotSuite.Keyboard.HookedKeys">
            <summary>
            The collections of keys to watch for
            </summary>
            <example>
            <code>
            <![CDATA[
            Keyboard.HookedKeys.Add(Keys.F5);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:BotSuite.Keyboard.hhook">
            <summary>
            Handle to the hook, need this to unhook and call the next hook
            </summary>
        </member>
        <member name="M:BotSuite.Keyboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:globalKeyboardHook"/> class and installs the keyboard hook.
            </summary>
            <remarks>
            use the whole class by the code from the example!
            </remarks>
            <example>
            <code>
            <![CDATA[
            Keyboard.HookedKeys.Add(Keys.F5);
            Keyboard.KeyDown += new KeyEventHandler(MyKeyDownRoutine);
            Keyboard.KeyUp += new KeyEventHandler(MyKeyUpRoutine);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:BotSuite.Keyboard.Finalize">
            <summary>
            unmanaged resources were released and other cleanup operations were performed before the
            <see cref="!:globalKeyboardHook"/> is reclaimed by garbage collection and uninstalls the keyboard hook.
            </summary>
            <remarks>
            destructor
            </remarks>
        </member>
        <member name="M:BotSuite.Keyboard.hook">
            <remarks>
            this is a private method. You cannot us it! See the construtor #ctor for an example.
            </remarks>
        </member>
        <member name="M:BotSuite.Keyboard.unhook">
            <summary>
            Uninstalls the global hook
            </summary>
            <remarks>
            this is a private method. You cannot us it! See the construtor #ctor for an example.
            </remarks>
        </member>
        <member name="M:BotSuite.Keyboard.hookProc(System.Int32,System.Int32,BotSuite.NativeMethods.keyboardHookStruct@)">
            <summary>
            callback for the keyboard hook
            </summary>
            <param name="code">hook code, do sth iff >=0</param>
            <param name="wParam">event type</param>
            <param name="lParam">keyhook event information</param>
            <remarks>
            this is a private method. You cannot us it! See the constructor #ctor for an example.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Keyboard.Type(System.String)">
            <summary>
            types a key or o sequence of keys
            </summary>
            <example>
            <code>
            Keyboard.Type("{ENTER}"); // click the enter button
            Keyboard.Type("ENTER");   // types "E","N","T","E","R"
            </code>
            </example>
            <remarks>
            http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.aspx
            </remarks>
            <param name="Sequence">Sequence to type</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Keyboard.HoldKey(System.Byte,System.Int32)">
            <summary>
            Hold down a key for a specific time
            </summary>
            <example>
            <code>
            Keyboard.HoldKey((byte)Keys.A, 250); // Holds down the "A" key for 250ms
            Keyboard.HoldKey((byte)Keys.Left, 1000); // Holds down "Left" key for 1 second
            </code>
            </example>
            <param name="key"></param>
            <param name="duration"></param>
        </member>
        <member name="M:BotSuite.Keyboard.IsKeyDown(System.Windows.Forms.Keys)">
            <summary>
            test if a key is pressed
            </summary>
            <example>
            <code>
            // test if F1 is currently pressed
            bool pressed = Keyboard.IsKeyDown(Keys.F1);
            </code>
            </example>
            <remarks>
            http://msdn.microsoft.com/en-us/library/system.windows.forms.keys
            </remarks>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="E:BotSuite.Keyboard.KeyDown">
            <summary>
            Occurs when one of the hooked keys is pressed
            </summary>
            <example>
            <code>
            <![CDATA[
            Keyboard.KeyDown += new KeyEventHandler(MyKeyDownRoutine);
            ]]>
            </code>
            </example>
        </member>
        <member name="E:BotSuite.Keyboard.KeyUp">
            <summary>
            Occurs when one of the hooked keys is released
            </summary>
            <example>
            <code>
            <![CDATA[
            Keyboard.KeyUp += new KeyEventHandler(MyKeyUpRoutine);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:BotSuite.Net.HttpProxy">
            <summary>
            proxy class for storing proxy informations for HttpClient
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpProxy.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor for proxy class
            </summary>
            <param name="address">url of proxy</param>
            <param name="username">username for proxy, if applicable</param>
            <param name="password">password for proxy, if applicable</param>
        </member>
        <member name="M:BotSuite.Net.HttpProxy.#ctor(System.Uri,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:BotSuite.Net.HttpProxy.GetWebProxy">
            <summary>
            returns the internally manageg WebProxy object for usage in HttpWebRequest
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotSuite.Net.HttpPostDataCollection">
            <summary>
            collection-class for HttpPostData-instances
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.#ctor">
            <summary>
            constructor for the HttpPostDataCollection
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Add(BotSuite.Net.HttpPostData)">
            <summary>
            adds a HttpPostData instance to the collection
            </summary>
            <param name="item">the item to add to the collection</param>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Clear">
            <summary>
            deletes all items from the collection
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Contains(BotSuite.Net.HttpPostData)">
            <summary>
            checks if a given item is already part of the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.CopyTo(BotSuite.Net.HttpPostData[],System.Int32)">
            <summary>
            copies the whole collection into a compatible one-dimensional array beginning at the given index of the target array
            </summary>
            <param name="array">the target array</param>
            <param name="arrayIndex">the index where to insert the items in the target array</param>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.Remove(BotSuite.Net.HttpPostData)">
            <summary>
            removes the given item from the collection
            </summary>
            <param name="item">the item to remove from the collection</param>
            <returns>true, if removal was succesfull, else false (like if the item wasn't part of the collection)</returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.GetEnumerator">
            <summary>
            returns the IEnumerator&lt;HttpPostData&gt; of this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            returns the System.Collections.IEnumarator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostDataCollection.ToString">
            <summary>
            creates a string representation of this collection
            </summary>
            <example>
            <code>
            var hpdc = new HttpPostDataCollection();
            hpdc.Add(new HttpPostData("sender", "wieschoo");
            hpdc.Add(new HttpPostData("message", "hallo%20welt");
            var postData = hpdc.ToString();
            </code>
            </example>
            <returns>a string representation of this collection</returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:BotSuite.Net.HttpPostDataCollection.FromString(System.String)" ignoriert -->
        <member name="P:BotSuite.Net.HttpPostDataCollection.Count">
            <summary>
            the amount of items in the collection
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpPostDataCollection.IsReadOnly">
            <summary>
            if the collection is read-only or not
            </summary>
        </member>
        <member name="T:BotSuite.Mouse">
            <summary>
            class for simulate mouse actions like moving or clicking
            </summary>
        </member>
        <member name="M:BotSuite.Mouse.LeftClick">
            <summary>
            causes a left-click (press and release)
            </summary>
            <example>
            <code>
            Mouse.LeftClick();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.LeftDown">
            <summary>
            press down the left mouse button
            </summary>
            <example>
            <code>
            Mouse.LeftDown();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.LeftUp">
            <summary>
            release the left mouse button
            </summary>
            <example>
            <code>
            Mouse.LeftUp();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.RightClick">
            <summary>
            causes a right-click (press and release)
            </summary>
            <example>
            <code>
            Mouse.RightClick();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.RightDown">
            <summary>
            press down the right mouse button
            </summary>
            <example>
            <code>
            Mouse.RightDown();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.RightUp">
            <summary>
            release the right mouse button
            </summary>
            <example>
            <code>
            Mouse.RightUp();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.DoubleClick">
            <summary>
            performs a double click
            </summary>
        </member>
        <member name="M:BotSuite.Mouse.Move(System.Drawing.Point,System.Boolean,System.Int32)">
            <summary>
            causes a mouse movement to a given point
            </summary>
            <example>
            <code>
            Point target = new Point(10,10);
            Mouse.Move(target,true,10);
            </code>
            </example>
            <param name="TargetPosition">target coordinate</param>
            <param name="human">prevent mouse jumps</param>
            <param name="steps">points of pathpolygons</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.Move(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            causes a mouse movement to given coordinates
            </summary>
            <example>
            <code>
            Mouse.Move(this.Left+10,this.Top+50,true,10);
            </code>
            </example>
            <param name="targetX">x coordinate of target</param>
            <param name="targetY">y coordinate of target</param>
            <param name="human">prevent mouse jumps</param>
            <param name="steps">points of pathpolygons</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.Move(System.Drawing.Rectangle,System.Boolean,System.Int32)">
            <summary>
            causes a mouse movement into the middle of a rectangle
            </summary>
            <example>
            <code>
            Rectangle r = new Rectangle(50, 50, 100, 100);
            Mouse.Move(r,true,10);
            </code>
            </example>
            <param name="R">the rectangle to move to</param>
            <param name="human">prevent mouse jumps</param>
            <param name="steps">points of pathpolygons</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.DragAndDrop(System.Drawing.Point,System.Drawing.Point,System.Boolean,System.Int32)">
            <summary>
            causes a drag and drop
            </summary>
            <param name="source">drag point</param>
            <param name="target">drop point</param>
            <param name="human">prevent mouse jumps</param>
            <param name="steps">points of pathpolygons</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.GetPosition">
            <summary>
            get the current position of the mouse pointer
            </summary>
            <example>
            <code>
            Point CurPos = Point.Empty;
            CurPos = Mouse.GetPosition();
            </code>
            </example>
            <returns>Point position</returns>
        </member>
        <member name="M:BotSuite.Mouse.Jiggle">
            <summary>
            causes a slightly mouse jiggle +-10 px
            </summary>
            <example>
            <code>
            Mouse.Jiggle();
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Mouse.MoveRelativeToWindow(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            move the mouse relativ to the window
            </summary>
            <example>
            <code>
            IntPtr hwnd = ... ;
            bool res = MoveRelativeToWindow(hwnd, 20, 35, true, 10);
            </code>
            </example>
            <param name="windowHandle">handle of window</param>
            <param name="targetX">x coordinate</param>
            <param name="targetY">y coordinate</param>
            <param name="human">prevent mouse jumps</param>
            <param name="steps">points of pathpolygons</param>
            <returns>true/false</returns>
        </member>
        <member name="M:BotSuite.Mouse.GetPositionRelativeToWindow(System.IntPtr)">
            <summary>
            get the current position of the mouse pointer relative to a window
            </summary>
            <example>
            <code>
            Point CurPos = Point.Empty;
            IntPtr hwnd = ... ;
            CurPos = Mouse.GetPositionRelativeToWindow(hwnd);
            </code>
            </example>
            <param name="window">handle of window</param>
            <returns>Point position</returns>
        </member>
        <member name="M:BotSuite.Mouse.InRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            returns whether the cursor is inside a rectangle or outside
            </summary>
            <example>
            <code>
            bool InRectangle = Mouse.InRectangle(50, 10, 20, 70);
            </code>
            </example>
            <param name="t">top of rectangle</param>
            <param name="l">left of rectangle</param>
            <param name="b">bottom of rectangle</param>
            <param name="r">right of rectangle</param>
            <returns>inside=true/outside=false</returns>
        </member>
        <member name="M:BotSuite.Mouse.Scroll(System.Int32)">
            <summary>
            simulates mouse scroll wheel actions
            </summary>
            <example>
            <code>
            Mouse.Scroll(-50);
            </code>
            </example>
            <param name="wheeldelta">if positive, scrolls down, if negative, scrolls up</param>
        </member>
        <member name="T:BotSuite.Utility">
            <summary>
             commons functions
            </summary>
        </member>
        <member name="M:BotSuite.Utility.Delay(System.Int32,System.Int32)">
            <summary>
            pause the current thread for x ms
            </summary>
            <param name="lower">min time</param>
            <param name="upper">max time </param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Utility.Delay(System.Int32)">
            <summary>
            pause the current thread for x ms
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Utility.Random(System.Int32,System.Int32)">
            <summary>
            create a random integer (unif) between lower and upper
            </summary>
            <param name="lower">min number</param>
            <param name="upper">max number</param>
            <returns>random integer</returns>
        </member>
        <member name="T:BotSuite.Net.HttpClient">
            <summary>
            HttpClient class for making bots for Browsergames
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpClient.#ctor(System.String,BotSuite.Net.HttpProxy,System.Boolean,System.String,System.Boolean)">
            <summary>
            constructor for the HttpClient class
            </summary>
            <param name="useragent">a useragent string</param>
            <param name="proxy">a proxy settings container (aka. HttpProxy)</param>
            <param name="useProxy">defines if proxy should be used or not for requests</param>
            <param name="initialReferer">the Referer the first request will be sent from, i.e. www.google.com</param>
            <param name="useUnsafeHeaderParsing">useUnsafeHeaderParsing</param>
        </member>
        <member name="M:BotSuite.Net.HttpClient.POST(System.String,BotSuite.Net.HttpPostDataCollection,System.String)">
            <summary>
            sends a HTTP POST request to a given URL with given POST data and a optional referer
            </summary>
            <example>
            <code>
            var hpdc = new HttpPostDataCollection();
            hpdc.Add(new HttpPostData("sender", "wieschoo");
            hpdc.Add(new HttpPostData("message", "hallo welt");
            var hc = new HttpClient("some-user-agent", "www.google.de");
            var html = hc.POST("http://www.codebot.de", hpdc);
            </code>
            </example>
            <param name="url">the URL to send the post request to</param>
            <param name="postdata">the POST data</param>
            <param name="referer">the referer to send the request from</param>
            <returns>the HTML sourcecode</returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:BotSuite.Net.HttpClient.POST(System.String,System.String,System.String)" ignoriert -->
        <member name="M:BotSuite.Net.HttpClient.GET(System.String,System.String)">
            <summary>
            sends a HTTP GET request to a given URL with a optional referer
            </summary>
            <example>
            <code>
            var hc = new HttpClient("some-user-agent", "www.google.de");
            var html = hc.GET("http://www.codebot.de");
            </code>
            </example>
            <param name="url">the URL to send the request to</param>
            <param name="referer">the referer to send the request from</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Net.HttpClient.SourcecodeToImage(System.String)">
            <summary>
            tries to convert a sourcecode-string (i.e. from a POST or GET request) into an image (works only if the response was an image)
            </summary>
            <example>
            <code>
            var hc = new HttpClient("some-user-agent", "www.google.de");
            var sourcecode = hc.GET("http://www.codebot.de");
            var img = HttpClient.SourcecodeToImage(sourcecode);
            </code>
            </example>
            <param name="sourcecode">the sourcecode-string that comes from a POTS or GET request</param>
            <returns>null, if unable to convert to image, else an System.Drawing.Image object</returns>
        </member>
        <member name="P:BotSuite.Net.HttpClient.AutoReferer">
            <summary>
            true, if the HttpClient should adjust the Referer at every change of the URL
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Referer">
            <summary>
            the current Referer
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.UseProxy">
            <summary>
            true, if the HttpClient should use the HttpClient.Proxy for requests
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.Proxy">
            <summary>
            proxy object with settings for proxy usage for requests (when HttpClient.UseProxy is set to true)
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpClient.UseUnsafeHeaderParsing">
            <summary>
            useUnsafeHeaderParsing
            </summary>
        </member>
        <member name="M:BotSuite.IniParser.#ctor(System.String)">
            <summary>
            handles ini files
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("\config.ini");
            // write something
            Config.Write("SomeVariable", "ValueToWrite");
            // read something
            string Get = Config.Read("SomeVariable");
            ]]>
            </code>
            </example>
            <param name="IniPath">file to open, either a relative or a absolute path (relative pathes start with "\"
            and for can only be pathes the same level as executable or below in file tree) --- UNCs not supported at the moment!</param>
        </member>
        <member name="M:BotSuite.IniParser.Write(System.String,System.String,System.String)">
            <summary>
            writes an information into the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            Config.Write("Section", "Variable", "Value");
            ]]>
            </code>
            </example>
            <param name="Section">section in ini file</param>
            <param name="Key">name of variable</param>
            <param name="Value">value of variable</param>
        </member>
        <member name="M:BotSuite.IniParser.Write(System.String,System.String)">
            <summary>
            writes an information into the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            Config.Write("Variable", "Value");
            ]]>
            </code>
            </example>
            <param name="Key">name of variable</param>
            <param name="Value">value of variable</param>
        </member>
        <member name="M:BotSuite.IniParser.Read(System.String,System.String)">
            <summary>
            writes an information into the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            string Get = Config.Read("Section", "Variable");
            ]]>
            </code>
            </example>
            <param name="Section">section in ini file</param>
            <param name="Key">name of variable</param>
            <returns>value of variable</returns>
        </member>
        <member name="M:BotSuite.IniParser.Read(System.String)">
            <summary>
            reads an information from the ini file
            </summary>
            <example>
            <code>
            <![CDATA[
            // load "config.ini" from the application directory
            IniParser Config = new IniParser("config");
            string Get = Config.Read("Variable");
            ]]>
            </code>
            </example>
            <param name="Key">name of variable</param>
            <returns>value of variable</returns>
        </member>
        <member name="T:BotSuite.Browser">
            <summary>
            just decoration pattern for WebBrowser
            </summary>
        </member>
        <member name="M:BotSuite.Browser.#ctor(System.Windows.Forms.WebBrowser)">
            <summary>
            initialise browser
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.ClickElementById(System.String)">
            <summary>
            causes a left click at an element
            </summary>
            <param name="id">id of element</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.FillInputById(System.String,System.String)">
            <summary>
            fill an inputfield
            </summary>
            <param name="id">id of input field</param>
            <param name="value">value to fill in</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.NavigateTo(System.String)">
            <summary>
            navigate to an url and wait until it is completely loaded
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.Browser.GetInnerNumberById(System.String)">
            <summary>
            get the inner Text (as an integer) of an element
            </summary>
            <param name="id">id of element</param>
            <returns>inner number</returns>
        </member>
        <member name="M:BotSuite.Browser.GetInnerTextById(System.String)">
            <summary>
            get the inner Text of an element
            </summary>
            <param name="id">id of element</param>
            <returns>inner text</returns>
        </member>
        <member name="M:BotSuite.Browser.UseNewIE">
            <summary>
            force the application to use IE8 or IE9
            </summary>
            <returns></returns>
        </member>
        <member name="T:BotSuite.Net.RequestException">
            <summary>
            Exception class for wrapping exceptions thrown by one of the request methods (POST/GET)
            </summary>
        </member>
        <member name="T:BotSuite.ControlArtist">
            <summary>
             This class provide functions to draw on the clientarea without computing the coordinate from absolute to relative
            </summary>
        </member>
        <member name="M:BotSuite.ControlArtist.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            constructor to use this class
            </summary>
            <example>
            <code>
            <![CDATA[
            int LeftMargin = 10;
            int TopMargin = 10;
            int BottomMargin = 10;
            int RightMargin = 100;
            // initialise control artists in form
            ControlArtist BL = new ControlArtist(this.CreateGraphics(), this.ClientRectangle);
            // draw a target rectangle with margin to the clientarea-borders
            BL.DrawRectangle(LeftMargin,TopMargin,RightMargin,BottomMargin);
            ]]>
            </code>
            </example>
            <param name="GF">target graphic</param>
            <param name="CR">clientarea as rectangle</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ControlArtist.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            draw a rectangle on the control be using margins
            </summary>
            <param name="LeftMargin">margin from left</param>
            <param name="TopMargin">margin from top</param>
            <param name="RightMargin">margin from right(default: 0)</param>
            <param name="BottomMargin">margin from bottom(default: 0)</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ControlArtist.GetDrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            same as DrawRectangle but only returns the rectangle without drawing
            </summary>
            <param name="LeftMargin">margin from left</param>
            <param name="TopMargin">margin from top</param>
            <param name="RightMargin">margin from right(default: 0)</param>
            <param name="BottomMargin">margin from bottom(default: 0)</param>
            <returns></returns>
        </member>
        <member name="T:BotSuite.NativeMethods">
            <summary>
             Pinvokes
            </summary>
        </member>
        <member name="F:BotSuite.NativeMethods.WH_KEYBOARD_LL">
            <summary>
            defines the callback type for the hook
            </summary>
        </member>
        <member name="M:BotSuite.NativeMethods.SetWindowsHookEx(System.Int32,BotSuite.NativeMethods.keyboardHookProc,System.IntPtr,System.UInt32)">
            <summary>
            Sets the windows hook, do the desired event, one of hInstance or threadId must be non-null
            </summary>
            <param name="idHook">The id of the event you want to hook</param>
            <param name="callback">The callback.</param>
            <param name="hInstance">The handle you want to attach the event to, can be null</param>
            <param name="threadId">The thread you want to attach the event to, can be null</param>
            <returns>a handle to the desired hook</returns>
        </member>
        <member name="M:BotSuite.NativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            Unhooks the windows hook.
            </summary>
            <param name="hInstance">The hook handle that was returned from SetWindowsHookEx</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:BotSuite.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.Int32,BotSuite.NativeMethods.keyboardHookStruct@)">
            <summary>
            Calls the next hook.
            </summary>
            <param name="idHook">The hook id</param>
            <param name="nCode">The hook code</param>
            <param name="wParam">The wparam.</param>
            <param name="lParam">The lparam.</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the library.
            </summary>
            <param name="lpFileName">Name of the library</param>
            <returns>A handle to the library</returns>
        </member>
        <member name="T:BotSuite.ScreenShot">
            <summary>
             This class provide functions to create screenshots
            </summary>
        </member>
        <member name="M:BotSuite.ScreenShot.Create">
            <summary>
            create a complete screenshot
            </summary>
            <example>
            <code>
            Bitmap capture = ScreenShot.Create();
            </code>
            </example>
            <returns>bitmap of captured screen</returns>
        </member>
        <member name="M:BotSuite.ScreenShot.CreateFromHidden(System.IntPtr)">
            <summary>
            creates a screenshot from a hidden window
            </summary>
            <example>
            <code>
            <![CDATA[
            IntPtr hwnd = ... ;
            Bitmap capture = ScreenShot.CreateFromHidden(hwnd);
            ]]>
            </code>
            </example>
            <param name="WindowHandle">handle of window</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ScreenShot.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            create a complete screenshot by using a rectangle 
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <example>
            <code>
            <![CDATA[
            // capture upper left 10 x 10 px rectangle
            Bitmap capture = ScreenShot.Create(0,0,10,10);
            ]]>
            </code>
            </example>
            <returns>bitmap of captured screen</returns>
        </member>
        <member name="M:BotSuite.ScreenShot.Create(System.IntPtr)">
            <summary>
            create a complete screenshot by using a handle
            </summary>
            <param name="WindowHandle">handle of window</param>
            <example>
            <code>
            <![CDATA[
            IntPtr hwnd = ... ;
            Bitmap capture = ScreenShot.Create(hwnd);
            ]]>
            </code>
            </example>
            <param name="WindowHandle">handle of window</param>
            <returns>captured screen</returns>
        </member>
        <member name="M:BotSuite.ScreenShot.CreateRelativeToControl(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            create a screenshot relativ to control C in a rectangle Focus
            </summary>
            <param name="C">relativ to this control</param>
            <param name="Focus">screenshot area</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.CommonRegex.Search(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            search a pattern in a text 
            </summary>
            <param name="Source">text where looking for</param>
            <param name="Pattern">pattern to look for</param>
            <param name="Optionen">Optionen</param>
            <returns>array of result</returns>
        </member>
        <member name="M:BotSuite.CommonRegex.Between(System.String,System.String,System.String)">
            <summary>
            returns a string between two strings
            </summary>
            <param name="Source">text where looking for</param>
            <param name="Start">before the string we are looking for</param>
            <param name="End">after the string we are looking for</param>
            <returns>all results</returns>
        </member>
        <member name="T:BotSuite.Net.HttpPostData">
            <summary>
            container-class for Http POST data key-value-pairs
            </summary>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.#ctor(System.String,System.String)">
            <summary>
            constructor for Http POST data key-value-pair
            </summary>
            <param name="key">key/name of the POST data</param>
            <param name="value">value of the POST data</param>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.ToString">
            <summary>
            creates a string-representation of the POST data
            </summary>
            <returns>a string representation of the POST data key-value-pair</returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.Equals(BotSuite.Net.HttpPostData)">
            <summary>
            checks if both instances of HTTP post data are equal
            </summary>
            <param name="other">the HttpPostData instance to compare equality with</param>
            <returns>true if both HttpPostData instances are equal, else false</returns>
        </member>
        <member name="M:BotSuite.Net.HttpPostData.CompareTo(BotSuite.Net.HttpPostData)">
            <summary>
            compares two HttpPostData instances, like for sorting in a list
            </summary>
            <param name="other">the HttpPostData instance to compare with</param>
            <returns>-1 if instance A is smaller, 0 if equal and 1 if instance A is greater then/to instance B</returns>
        </member>
        <member name="P:BotSuite.Net.HttpPostData.Key">
            <summary>
            the key/name of the POST data
            </summary>
        </member>
        <member name="P:BotSuite.Net.HttpPostData.Value">
            <summary>
            the value of the POST data
            </summary>
        </member>
        <member name="T:BotSuite.ApplicationTunnel">
            <summary>
            control extern application by reading values, writing values, (todo) click controls
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="Id">id of process</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="ProcessName">name of process</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Finalize">
            <summary>
            destructor
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.GetProcessIdByName(System.String)">
            <summary>
            get id of process by given name
            </summary>
            <example>
            <code>
            Process[] ListOfProcess = Memory.GetProcessIdByName("the name");
            </code>
            </example>
            <param name="name">name of process</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.GetModuleBase(System.String,System.String)">
            <summary>
            returns the ModulBase
            </summary>
            <param name="ProcName">name of process</param>
            <param name="ModuleName">name of modul</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Hex2Int(System.String)">
            <summary>
            convert a hex string into int
            </summary>
            <example>
            <code>
            int result = Memory.Hex2Int"00B28498");
            </code>
            </example>
            <param name="hex">hex</param>
            <returns>result as integer </returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.AttachProcess">
            <summary>
            private function to attach a running process
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.DetachProcess">
            <summary>
            private function to detach a running process
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.ReadMemoryAtAdress(System.IntPtr,System.UInt32,System.Int32@)">
            <summary>
            private function to read memory
            </summary>
            <param name="MemoryAddress">address</param>
            <param name="bytesToRead">bytes</param>
            <param name="bytesRead">result</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Read``1(System.String,System.Int32[])">
            <summary>
            read a value at a adress
            </summary>
            <example>
            <code>
            <![CDATA[
            // direct access at 00B28498
            int MyValue1 = Trainer.Read<int>("00B28498");
            // direct access at "001AAAC4", 0x464
            int MyValue2 = Trainer.Read<int>("001AAAC4", 0x464);
            float MyValue1 = Trainer.Read<float>("00B28498");
            double MyValue1 = Trainer.Read<double>("00B28498");
            uint MyValue1 = Trainer.Read<uint>("00B28498");
            ]]>
            </code>
            </example>
            <typeparam name="T">type of value</typeparam>
            <param name="pAddress">address as string</param>
            <param name="relative">relative to baseaddress</param>
            <returns>value to read</returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Read``1(System.Int32,System.Int32[])">
            <summary>
            Read a value, see other Read-method
            </summary>
            <typeparam name="T">type of value</typeparam>
            <param name="pAddress">address as integer</param>
            <param name="relative">relative to baseaddress</param>
            <returns>value to read</returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.WriteMemoryAtAdress(System.IntPtr,System.Byte[])">
            <summary>
            private function to write at memory
            </summary>
            <param name="MemoryAddress">address</param>
            <param name="bytesToWrite">bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Write``1(System.String,``0,System.Int32[])">
            <summary>
            write a value at memory
            </summary>
            <example>
            <code>
            <![CDATA[
            Memory Trainer = new Memory(...); 
            // direct access at 00B28498 
            Trainer.Write<int>("00B28498", an integer);
            // follow pointer access at "001AAAC4", 0x464
            Trainer.Write<int>("001AAAC4", an integer,0x464);
            Trainer.Write<float>("00B28498", a float var);
            Trainer.Write<double>("00B28498", a double var);
            Trainer.Write<uint>("00B28498", an unsigned integer);
            ]]>
            </code>
            </example>
            <typeparam name="T">type of value</typeparam>
            <param name="pAddress">address to write</param>
            <param name="WriteData">data to write</param>
            <param name="Offsets">offsets</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Write``1(System.Int32,``0,System.Int32[])">
            <summary>
            write a t memory
            </summary>
            <typeparam name="T">type of data to write</typeparam>
            <param name="pAddress">address to write</param>
            <param name="WriteData">data to write</param>
            <param name="Offsets">offsets</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.WriteAscii(System.Int32,System.String)">
            <summary>
            Write a string of ASCII
            </summary>
            <param name="pAddress">address to write</param>
            <param name="StringToWrite">string to write</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.WriteUnicode(System.Int32,System.String)">
            <summary>
            Writes a unicode string
            </summary>
            <param name="pAddress">address to write</param>
            <param name="StringToWrite">string to write</param>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Pointer(System.Int32,System.Int32[])">
            <summary>
            follow a pointer by start address
            </summary>
            <example>
            <code>
            // start in BaseAddress add follow the pointers by adding the offsets
            int MyPointer2 = Trainer.Pointer( 0x284, 0xE4, 0xE4, 0x30, 0x108);
            </code>
            </example>
            <param name="start">start address</param>
            <param name="Offsets">offsets</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Pointer(System.String,System.Int32[])">
            <summary>
            follow a pointer by start address
            </summary>
            <example>
            <code>
            // start in 00B28498 add follow the pointers by adding the offsets
            int MyPointer2 = Trainer.Pointer("00B28498", 0x284, 0xE4, 0xE4, 0x30, 0x108);
            </code>
            </example>
            <param name="start">start address</param>
            <param name="Offsets">offsets</param>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.GetHandle">
            <summary>
            returns handle of extern process
            </summary>
            <returns></returns>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Close">
            <summary>
            tries to close the main window of process
            </summary>
        </member>
        <member name="M:BotSuite.ApplicationTunnel.Kill">
            <summary>
            kills radical the process
            </summary>
        </member>
    </members>
</doc>
